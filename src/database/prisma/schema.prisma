// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  firstName      String
  lastName       String
  email          String       @unique
  emailVerified  Boolean      @default(false)
  avatarFilename String?
  nickname       String       @unique
  password       String
  seriesCreated  Series[]
  seasonsCreated Season[]
  seriesFollowed UserSeries[]
}

model Series {
  id              String       @id @default(uuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  title           String
  synopsis        String?
  launchAt        DateTime?
  createdByUserId String
  createdByUser   User         @relation(fields: [createdByUserId], references: [id])
  seasons         Season[]
  followedBy      UserSeries[]
}

model Season {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  synopsis        String?
  number          Int
  launchAt        DateTime?
  seriesId        String
  createdByUserId String
  createdByUser   User      @relation(fields: [createdByUserId], references: [id])
  series          Series    @relation(fields: [seriesId], references: [id])
  episodes        Episode[]
}

model Episode {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  title         String
  synopsis      String?
  episodeNumber Int
  launchAt      DateTime
  seasonId      String
  season        Season   @relation(fields: [seasonId], references: [id])
}

model UserSeries {
  userId   String
  seriesId String
  user     User    @relation(fields: [userId], references: [id])
  series   Series  @relation(fields: [seriesId], references: [id])
  hasAlert Boolean @default(true)

  @@id([userId, seriesId])
}
